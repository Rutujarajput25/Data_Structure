class Node {
    int data;
    Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class LinkedList {
    Node head;

    public LinkedList() {
        this.head = null;
    }

    // Insert at the beginning of the list
    public void insertAtBeginning(int data) {
        Node newNode = new Node(data);
        newNode.next = head;
        head = newNode;
    }

    // Insert at the middle of the list
    public void insertAtMiddle(int data, int position) {
        Node newNode = new Node(data);
        if (position == 0) {
            insertAtBeginning(data);
            return;
        }

        Node current = head;
        for (int i = 0; i < position - 1 && current != null; i++) {
            current = current.next;
        }

        if (current == null) {
            System.out.println("Position out of bounds.");
            return;
        }

        newNode.next = current.next;
        current.next = newNode;
    }

    // Insert at the end of the list
    public void insertAtEnd(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            return;
        }

        Node current = head;
        while (current.next != null) {
            current = current.next;
        }

        current.next = newNode;
    }

    // Delete from the beginning of the list
    public void deleteFromBeginning() {
        if (head != null) {
            head = head.next;
        }
    }

    // Delete from the middle of the list
    public void deleteFromMiddle(int position) {
        if (position == 0) {
            deleteFromBeginning();
            return;
        }

        Node current = head;
        for (int i = 0; i < position - 1 && current != null; i++) {
            current = current.next;
        }

        if (current == null || current.next == null) {
            System.out.println("Position out of bounds.");
            return;
        }

        current.next = current.next.next;
    }

    // Delete from the end of the list
    public void deleteFromEnd() {
        if (head == null) {
            return;
        }

        if (head.next == null) {
            head = null;
            return;
        }

        Node current = head;
        while (current.next.next != null) {
            current = current.next;
        }

        current.next = null;
    }

    public void display() {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " -> ");
            current = current.next;
        }
        System.out.println("null");
    }
}

public class Main {
    public static void main(String[] args) {
        LinkedList linkedList = new LinkedList();

        linkedList.insertAtEnd(1);
        linkedList.insertAtEnd(2);
        linkedList.insertAtEnd(3);
        linkedList.display(); // Output: 1 -> 2 -> 3 -> null

        linkedList.insertAtBeginning(0);
        linkedList.display(); // Output: 0 -> 1 -> 2 -> 3 -> null

        linkedList.insertAtMiddle(4, 2);
        linkedList.display(); // Output: 0 -> 1 -> 4 -> 2 -> 3 -> null

        linkedList.deleteFromBeginning();
        linkedList.display(); // Output: 1 -> 4 -> 2 -> 3 -> null

        linkedList.deleteFromMiddle(2);
        linkedList.display(); // Output: 1 -> 4 -> 3 -> null

        linkedList.deleteFromEnd();
        linkedList.display(); // Output: 1 -> 4 -> null
    }
}
